trigger:
- dev
- master

pr:
- master


pool:
  vmImage: 'windows-latest'

variables:
  - group: 'Package Versioning'
  - name: buildPlatform
    value: 'Any CPU'
  - name: buildConfiguration 
    value: 'Release'
  - name: buildDirPath 
    value: '$(Build.SourcesDirectory)/src/bin/$(buildPlatform)/$(buildConfiguration)'
  - name: packageVersion
    value: '$(major).$(minor).$(patch)'


jobs:
  - job: Init
    displayName: Initialize & Versioning
    steps:
      - task: PowerShell@2
        displayName: Set Development Version
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/dev')
        inputs:
          targetType: 'inline'
          script: 'Write-Host  "##vso[task.setvariable variable=packageVersion]$(packageVersion)-ci.$(Build.BuildId)"'

  - job: BuildPack
    displayName: Build & Pack
    dependsOn: Init
    steps:
    - task: MSBuild@1
      displayName: Build Solution
      inputs:
        solution: '**/src/ReCaptcha/ReCaptcha.csproj'
        configuration: $(buildConfiguration)
        platform: $(buildPlatform)
        msbuildArguments: '/restore /t:Build /p:ContinuousIntegrationBuild=true /p:Deterministic=false'

    - task: MSBuild@1
      displayName: Pack Solution
      inputs:
        solution: '**/src/ReCaptcha/ReCaptcha.csproj'
        configuration: $(buildConfiguration)
        platform: $(buildPlatform)
        msbuildArguments: '/t:Pack /p:PackageVersion=$(packageVersion) /p:PackageOutputPath="$(buildDirPath)"'

  - job: Test
    displayName: Run Unit Tests
    dependsOn: Init
    steps:
      - task: DotNetCoreCLI@2
        displayName: Run Tests
        inputs:
          command: 'test'
          publishTestResults: true
          projects: '**/test/ReCaptcha.Tests/ReCaptcha.Tests.csproj'
          testRunTitle: 'Project Unit Tests'
          workingDirectory: '$(System.DefaultWorkingDirectory)'

  - job: PublishArtifacts
    displayName: Publish Production Artifacts
    dependsOn: BuildPack | Test
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    steps:
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(buildDirPath)'
          ArtifactName: 'nuget'
          publishLocation: 'Container'

  - deployment: PushArtifacts
    displayName: Push to Development Feed
    dependsOn: BuildPack | Test
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
    environment: Development
    strategy:
      runOnce:
        deploy:
          steps:
            - task: NuGetCommand@2
              inputs:
                command: 'push'
                packagesToPush: '$(buildDirPath)/**/*.nupkg;!$(buildDirPath)/**/*.symbols.nupkg'
                nuGetFeedType: 'internal'
                publishVstsFeed: '664acd3b-eaa2-47d0-a9a4-09c7e2741d7d'
                allowPackageConflicts: true